{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","Db","r","fixtures","utils","beforeEach","t","dbName","v4","db","connect","context","true","connected","is","saveImage","image","getImage","created","description","url","likes","liked","deepEqual","tags","user_id","id","public_id","encode","truthy","createdAt","afterEach","always","disconnect","false","conn","host","port","dbDrop","run","likeImage","result","images","getImages","saveImages","map","img","Promise","all","length","saveUser","user","getUser","plainPassword","password","username","email","name","encrypt"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst uuid = require('uuid-base62')\r\nconst Db = require('../lib/db.js')\r\nconst r = require('rethinkdb')\r\nconst fixtures = require('./fixtures/')\r\nconst utils = require('../lib/utils')\r\n\r\ntest.beforeEach('creando base de datos', async t => {\r\n  const dbName = `platzigram_${uuid.v4()}`\r\n  const db = new Db({ db: dbName })\r\n  await db.connect()\r\n  t.context.db = db\r\n  t.context.dbName = dbName\r\n  t.true(db.connected, 'debera estar conectado')\r\n})\r\n\r\ntest('save image', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.saveImage, 'function', 'saveImage es una funcion')\r\n  let image = fixtures.getImage()\r\n\r\n  let created = await db.saveImage(image)\r\n  t.is(created.description, image.description)\r\n  t.is(created.url, image.url)\r\n  t.is(created.likes, image.likes)\r\n  t.is(created.liked, image.liked)\r\n  t.deepEqual(created.tags, [ 'awesome', 'tags', 'platzi' ])\r\n  t.is(created.user_id, image.user_id)\r\n  t.is(typeof created.id, 'string')\r\n  t.is(created.public_id, uuid.encode(created.id))\r\n  t.truthy(created.createdAt)\r\n})\r\ntest.afterEach.always('desconectando de la base de datos', async t => {\r\n  let db = t.context.db\r\n  let dbName = t.context.dbName\r\n\r\n  await db.disconnect()\r\n  t.false(db.connected, 'deberia estar desconectado')\r\n  let conn = await r.connect({host: '192.168.4.145', port: 28015})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n\r\ntest('like image', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.likeImage, 'function', 'likeImage es una funcion ')\r\n\r\n  let image = fixtures.getImage()\r\n  let created = await db.saveImage(image)\r\n  let result = await db.likeImage(created.public_id)\r\n\r\n  t.true(result.liked)\r\n  t.is(result.likes, image.likes + 1)\r\n})\r\ntest('get image', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.getImage, 'function', 'getImage debe ser una funcion')\r\n\r\n  let image = fixtures.getImage()\r\n  let created = await db.saveImage(image)\r\n  let result = await db.getImage(created.public_id)\r\n\r\n  t.deepEqual(created, result)\r\n})\r\ntest('list all images', async t => {\r\n  let db = t.context.db\r\n  let images = fixtures.getImages(3)\r\n  let saveImages = images.map(img => db.saveImage(img))\r\n  let created = await Promise.all(saveImages)\r\n  let result = await db.getImages()\r\n\r\n  t.is(created.length, result.length)\r\n})\r\ntest('save user', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.saveUser, 'function', 'saveUser is a function')\r\n  let user = fixtures.getUser()\r\n  let plainPassword = user.password\r\n  let created = await db.saveUser(user)\r\n  t.is(user.username, created.username)\r\n  t.is(user.email, created.email)\r\n  t.is(user.name, created.name)\r\n  t.is(utils.encrypt(plainPassword), created.password)\r\n  t.is(typeof created.id, 'string')\r\n  t.truthy(created.createdAt)\r\n})\r\n"]}