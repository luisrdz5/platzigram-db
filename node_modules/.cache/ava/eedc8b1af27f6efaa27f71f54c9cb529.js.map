{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","Db","dbName","v4","db","before","t","connect","true","connected","is","saveImage","image","descripcion","url","likes","liked","user_id","created","description","console","log","tags","deepEqual","id","public_id","encode","truthy","createdAt","after","disconnect","false"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst uuid = require('uuid-base62')\r\nconst Db = require('../lib/db.js')\r\n/* const r = require('rethinkdb') */\r\n\r\nconst dbName = `platzigram_${uuid.v4()}`\r\nconst db = new Db({ db: dbName })\r\n\r\ntest.before('creando base de datos', async t => {\r\n  await db.connect()\r\n  t.true(db.connected, 'debera estar conectado')\r\n})\r\n\r\ntest('save image', async t => {\r\n  t.is(typeof db.saveImage, 'function', 'saveImage es una funcion')\r\n  let image = {\r\n    descripcion: 'an #Awesome picture with #tags in #platzi',\r\n    url: `https://platzigram.test/${uuid.v4()}.jpg`,\r\n    likes: 0,\r\n    liked: false,\r\n    user_id: uuid.uuid()\r\n  }\r\n  let created = await db.saveImage(image)\r\n  t.is(created.description, image.description)\r\n  t.is(created.url, image.url)\r\n  t.is(created.likes, image.likes)\r\n  t.is(created.liked, image.liked)\r\n  console.log(created.tags)\r\n  t.deepEqual(created.tags, [ 'awesome', 'tags', 'platzi' ])\r\n  t.is(created.user_id, image.user_id)\r\n  t.is(typeof created.id, 'string')\r\n  t.is(created.public_id, uuid.encode(created.id))\r\n  t.truthy(created.createdAt)\r\n})\r\n\r\ntest.after('desconectando de la base de datos', async t => {\r\n  await db.disconnect()\r\n  t.false(db.connected, 'deberia estar desconectado')\r\n})\r\n/* test.after.always('limpiando base de datos', async t => {\r\n  let conn = await r.connect({host: '192.168.4.145', port: 28015})\r\n  await r.dbDrop(dbName).run(conn)\r\n}) */\r\n"]}