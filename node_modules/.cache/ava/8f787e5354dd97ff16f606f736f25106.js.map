{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","Db","r","dbName","v4","db","before","t","connect","true","connected","after","disconnect","false","always","conn","host","port","dbDrop","run","is","saveImage","image","url","likes","liked","user_id","created","id","truthy","createdAt"],"mappings":"AAAA;;;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,OAAOD,QAAQ,aAAR,CAAb;AACA,MAAME,KAAKF,QAAQ,cAAR,CAAX;AACA,MAAMG,IAAIH,QAAQ,WAAR,CAAV;;AAEA,MAAMI,SAAU,cAAaH,KAAKI,EAAL,EAAU,EAAvC;AACA,MAAMC,KAAK,IAAIJ,EAAJ,CAAO,EAAEI,IAAIF,MAAN,EAAP,CAAX;;AAEAL,KAAKQ,MAAL,CAAY,uBAAZ;AAAA,+BAAqC,WAAMC,CAAN,EAAW;AAAA;;AAC9C,UAAMF,GAAGG,OAAH,EAAN;AACAD,MAAEE,IAAF,uBAAO,qCAAGC,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAqB,wBAArB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAZ,KAAKa,KAAL,CAAW,mCAAX;AAAA,gCAAgD,WAAMJ,CAAN,EAAW;AAAA;;AACzD,UAAMF,GAAGO,UAAH,EAAN;AACAL,MAAEM,KAAF,yBAAQ,sCAAGH,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAsB,4BAAtB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAZ,KAAKa,KAAL,CAAWG,MAAX,CAAkB,yBAAlB;AAAA,gCAA6C,WAAMP,CAAN,EAAW;AACtD,QAAIQ,OAAO,MAAMb,EAAEM,OAAF,CAAU,EAACQ,MAAM,eAAP,EAAwBC,MAAM,KAA9B,EAAV,CAAjB;AACA,UAAMf,EAAEgB,MAAF,CAASf,MAAT,EAAiBgB,GAAjB,CAAqBJ,IAArB,CAAN;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAjB,KAAK,YAAL;AAAA,gCAAmB,WAAMS,CAAN,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAC5BA,MAAEa,EAAF,yBAAK,mBAAO,+CAAGC,SAAV,yBAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA0B,UAA1B,EAAsC,0BAAtC;AACA,QAAIC,QAAQ;AACVC,WAAM,2BAA0BvB,KAAKI,EAAL,EAAU,MADhC;AAEVoB,aAAO,CAFG;AAGVC,aAAO,KAHG;AAIVC,eAAS1B,KAAKA,IAAL;AAJC,KAAZ;AAMA,QAAI2B,UAAU,MAAMtB,GAAGgB,SAAH,CAAaC,KAAb,CAApB;AACAf,MAAEa,EAAF,yBAAK,2CAAQG,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAkB,yCAAMA,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAhB,MAAEa,EAAF,yBAAK,2CAAQI,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAoB,yCAAMA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAjB,MAAEa,EAAF,yBAAK,2CAAQK,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAoB,yCAAMA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAlB,MAAEa,EAAF,2BAAK,4CAAQM,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAsB,0CAAMA,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAnB,MAAEa,EAAF,2BAAK,oBAAO,qDAAQQ,EAAf,yBAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAwB,QAAxB;AACArB,MAAEsB,MAAF,2BAAS,4CAAQC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAfD;;AAAA;AAAA;AAAA;AAAA","file":"db-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst uuid = require('uuid-base62')\r\nconst Db = require('../lib/db.js')\r\nconst r = require('rethinkdb')\r\n\r\nconst dbName = `platzigram_${uuid.v4()}`\r\nconst db = new Db({ db: dbName })\r\n\r\ntest.before('creando base de datos', async t => {\r\n  await db.connect()\r\n  t.true(db.connected, 'debera estar conectado')\r\n})\r\n\r\ntest.after('desconectando de la base de datos', async t => {\r\n  await db.disconnect()\r\n  t.false(db.connected, 'deberia estar desconectado')\r\n})\r\n\r\ntest.after.always('limpiando base de datos', async t => {\r\n  let conn = await r.connect({host: '192.168.4.145', port: 28015})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n\r\ntest('save image', async t => {\r\n  t.is(typeof db.saveImage, 'function', 'saveImage es una funcion')\r\n  let image = {\r\n    url: `https://platzigram.test/${uuid.v4()}.jpg`,\r\n    likes: 0,\r\n    liked: false,\r\n    user_id: uuid.uuid()\r\n  }\r\n  let created = await db.saveImage(image)\r\n  t.is(created.url, image.url)\r\n  t.is(created.likes, image.likes)\r\n  t.is(created.liked, image.liked)\r\n  t.is(created.user_id, image.user_id)\r\n  t.is(typeof created.id, 'string')\r\n  t.truthy(created.createdAt)\r\n})\r\n"]}