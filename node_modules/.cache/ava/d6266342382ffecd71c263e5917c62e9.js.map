{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","Db","r","fixtures","dbName","v4","db","before","t","connect","true","connected","is","saveImage","image","getImage","created","description","url","likes","liked","console","log","tags","deepEqual","user_id","id","public_id","encode","truthy","createdAt","after","disconnect","false","always","conn","host","port","dbDrop","run"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst uuid = require('uuid-base62')\r\nconst Db = require('../lib/db.js')\r\nconst r = require('rethinkdb')\r\nconst fixtures = require('./fixtures/')\r\n\r\nconst dbName = `platzigram_${uuid.v4()}`\r\nconst db = new Db({ db: dbName })\r\n\r\ntest.before('creando base de datos', async t => {\r\n  await db.connect()\r\n  t.true(db.connected, 'debera estar conectado')\r\n})\r\n\r\ntest('save image', async t => {\r\n  t.is(typeof db.saveImage, 'function', 'saveImage es una funcion')\r\n  let image = fixtures.getImage()\r\n\r\n  let created = await db.saveImage(image)\r\n  t.is(created.description, image.description)\r\n  t.is(created.url, image.url)\r\n  t.is(created.likes, image.likes)\r\n  t.is(created.liked, image.liked)\r\n  console.log(created.tags)\r\n  t.deepEqual(created.tags, [ 'awesome', 'tags', 'platzi' ])\r\n  t.is(created.user_id, image.user_id)\r\n  t.is(typeof created.id, 'string')\r\n  t.is(created.public_id, uuid.encode(created.id))\r\n  t.truthy(created.createdAt)\r\n})\r\n\r\ntest.after('desconectando de la base de datos', async t => {\r\n  await db.disconnect()\r\n  t.false(db.connected, 'deberia estar desconectado')\r\n})\r\ntest.after.always('limpiando base de datos', async t => {\r\n  let conn = await r.connect({host: '192.168.4.145', port: 28015})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n"]}