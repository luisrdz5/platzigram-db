{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","Db","r","dbName","v4","db","before","t","connect","true","connected","after","disconnect","false","always","conn","host","port","dbDrop","run","is","saveImage"],"mappings":"AAAA;;;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,OAAOD,QAAQ,aAAR,CAAb;AACA,MAAME,KAAKF,QAAQ,cAAR,CAAX;AACA,MAAMG,IAAIH,QAAQ,WAAR,CAAV;;AAEA,MAAMI,SAAU,cAAaH,KAAKI,EAAL,EAAU,EAAvC;AACA,MAAMC,KAAK,IAAIJ,EAAJ,CAAO,EAAEI,IAAIF,MAAN,EAAP,CAAX;;AAEAL,KAAKQ,MAAL,CAAY,uBAAZ;AAAA,+BAAqC,WAAMC,CAAN,EAAW;AAAA;;AAC9C,UAAMF,GAAGG,OAAH,EAAN;AACAD,MAAEE,IAAF,uBAAO,qCAAGC,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAqB,wBAArB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAZ,KAAKa,KAAL,CAAW,mCAAX;AAAA,gCAAgD,WAAMJ,CAAN,EAAW;AAAA;;AACzD,UAAMF,GAAGO,UAAH,EAAN;AACAL,MAAEM,KAAF,yBAAQ,sCAAGH,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAsB,4BAAtB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAZ,KAAKa,KAAL,CAAWG,MAAX,CAAkB,yBAAlB;AAAA,gCAA6C,WAAMP,CAAN,EAAW;AACtD,QAAIQ,OAAO,MAAMb,EAAEM,OAAF,CAAU,EAACQ,MAAM,eAAP,EAAwBC,MAAM,KAA9B,EAAV,CAAjB;AACA,UAAMf,EAAEgB,MAAF,CAASf,MAAT,EAAiBgB,GAAjB,CAAqBJ,IAArB,CAAN;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAjB,KAAK,YAAL;AAAA,gCAAmB,WAAMS,CAAN,EAAW;AAAA;;AAC5BA,MAAEa,EAAF,yBAAK,mBAAO,+CAAGC,SAAV,yBAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA0B,UAA1B,EAAsC,0BAAtC;AACD,GAFD;;AAAA;AAAA;AAAA;AAAA","file":"db-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst uuid = require('uuid-base62')\r\nconst Db = require('../lib/db.js')\r\nconst r = require('rethinkdb')\r\n\r\nconst dbName = `platzigram_${uuid.v4()}`\r\nconst db = new Db({ db: dbName })\r\n\r\ntest.before('creando base de datos', async t => {\r\n  await db.connect()\r\n  t.true(db.connected, 'debera estar conectado')\r\n})\r\n\r\ntest.after('desconectando de la base de datos', async t => {\r\n  await db.disconnect()\r\n  t.false(db.connected, 'deberia estar desconectado')\r\n})\r\n\r\ntest.after.always('limpiando base de datos', async t => {\r\n  let conn = await r.connect({host: '192.168.4.145', port: 28015})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n\r\ntest('save image', async t => {\r\n  t.is(typeof db.saveImage, 'function', 'saveImage es una funcion')\r\n})\r\n"]}